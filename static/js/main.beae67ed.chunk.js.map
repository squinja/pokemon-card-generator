{"version":3,"sources":["components/PokemonContext.js","static/pokeball-icon.png","components/Nav.js","static/example1.png","static/example2.png","static/example3.png","static/example4.png","components/About.js","components/Shop.js","components/Pokemon.js","components/AddPokemon.js","components/PokemonList.js","components/ItemDetail.js","components/CardGeneratorContext.jsx","components/SearchPhotos.jsx","components/SearchPokemon.jsx","components/CardCanvas.jsx","components/TextInputForCanvas.jsx","components/ColorInputForCanvas.jsx","components/CanvasHowToUse.jsx","components/ExportHandler.jsx","components/CardGenerator.jsx","components/SearchBar.js","components/PokemonCard.jsx","components/Announcer.js","components/Pagination.jsx","components/RegionSelectorContext.jsx","components/RegionSelector.jsx","components/LoaderGUI.jsx","components/FetchPokemonList.jsx","components/Database.js","components/App.js","index.js"],"names":["PokemonContext","createContext","PokemonProvider","props","useState","name","type","id","pokemon","setPokemon","Provider","value","children","Nav","useContext","navStyle","color","className","alt","src","icon","style","width","height","to","About","example1","example2","example3","example4","Shop","useEffect","fetchItems","abilities","setAbilities","a","fetch","data","json","garchompData","console","log","map","ability","slot","replace","Pokemon","AddPokemon","setName","setType","onSubmit","e","preventDefault","prevPokemon","onChange","target","PokemonList","Item","match","fetchItem","params","setAbility","item","CardGeneratorContext","CardGeneratorProvider","backgroundPhotoURL","setBackgroundPhotoURL","pokemonSelect","setPokemonSelect","pokemonFetchStatus","setPokemonFetchStatus","backgroundPhotoFetchStatus","setBackgroundPhotoFetchStatus","SearchPhotos","query","setQuery","unsplash","createApi","accessKey","process","search","getPhotos","background_image","response","results","urls","regular","state","fetchBackgroundImage","searchForPhotos","length","placeholder","SearchPokemon","axios","get","then","sprites","front_default","status","catch","request","searchForPokemon","url","CardCanvas","cardText","textColor","pokemonArray","useImage","backgroundImage","setIsDragging","pokemonWidth","setPokemonWidth","pokemonHeight","setPokemonHeight","imageX","setImageX","imageY","setImageY","pokemonX","setPokemonX","pokemonY","setPokemonY","textX","textY","PokemonPicture","shapeProps","isSelected","onSelect","shapeRef","React","useRef","transformerRef","current","nodes","getLayer","batchDraw","Fragment","image","onClick","onTap","ref","draggable","x","y","onDragEnd","onTransformEnd","node","scaleX","scaleY","Math","max","boundBoxFunc","oldBox","newBox","selectedId","selectShape","checkDeselect","clickedOnEmpty","getStage","clickedOnBackground","attrs","stageRef","onMouseDown","onTouchStart","onDragStart","newAttrs","fontSize","fontFamily","text","fill","TextInputForCanvas","setCardText","setText","updateText","ColorInputForCanvas","setTextColor","setColor","for","updateColor","CanvasHowToUse","ExportHandler","CardGenerator","pokemonFetchError","SearchBar","searchQuery","setSearchQuery","history","useHistory","action","method","autoComplete","push","htmlFor","onInput","PokemonCard","types","reduce","acc","i","entry_number","toUpperCase","moves","move","Announcer","message","role","aria-live","Pagination","RegionSelectorContext","RegionSelectorProvider","region","setRegion","RegionSelector","selected","disabled","hidden","LoaderGUI","display","justifyContent","alignItems","FetchPokemonList","loading","setLoading","dataN","Bluebird","pokemon_entries","poke","pokemon_species","varieties","finalData","detailedPokeArr","Database","window","location","URLSearchParams","filteredMons","mons","filter","mon","includes","filterPokemon","currentPage","setCurrentPage","2","3","4","5","8","12","16","20","App","path","component","exact","ItemDetail","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.beae67ed.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\r\n\r\nexport const PokemonContext = createContext();\r\n\r\nexport const PokemonProvider = (props) => {\r\n  const [pokemon, setPokemon] = useState([\r\n    { name: \"Magneton\", type: \"Steel/Electric\", id: 1 },\r\n    { name: \"Weezing\", type: \"Poison\", id: 2 },\r\n    { name: \"Skarmory\", type: \"Steel/Electric\", id: 3 },\r\n    { name: \"Magcargo\", type: \"Fire/Rock\", id: 4 },\r\n  ]);\r\n  return (\r\n    <PokemonContext.Provider value={[pokemon, setPokemon]}>\r\n      {props.children}\r\n    </PokemonContext.Provider>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/pokeball-icon.bed19d90.png\";","import React, { useContext } from \"react\";\r\nimport \"./App.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PokemonContext } from \"./PokemonContext\";\r\n\r\nimport icon from \"./../static/pokeball-icon.png\";\r\n\r\nconst Nav = () => {\r\n  const [pokemon, setPokemon] = useContext(PokemonContext);\r\n  const navStyle = {\r\n    color: \"white\",\r\n  };\r\n  return (\r\n    <nav>\r\n      <div className=\"navbar-right\">\r\n        <img\r\n          alt=\"pokeball\"\r\n          src={icon}\r\n          style={{\r\n            width: \"80px\",\r\n            height: \"80px\",\r\n          }}\r\n        />\r\n        <h2 className=\"navbar-title\">Pokemon Card Generator</h2>\r\n      </div>\r\n\r\n      <ul className=\"nav-links\">\r\n        <Link style={navStyle} to=\"/cardgenerator\">\r\n          <li>Make a Card!</li>\r\n        </Link>\r\n        <Link style={navStyle} to=\"/\">\r\n          <li>Show Database</li>\r\n        </Link>\r\n\r\n        {/* <Link style={navStyle} to=\"/shop\">\r\n          <li>Shop</li>\r\n        </Link> */}\r\n        <Link style={navStyle} to=\"/about\">\r\n          <li>About</li>\r\n        </Link>\r\n\r\n        {/* <Link style={navStyle} to=\"/pokemonlist\">\r\n          <li>Pokemon List: {pokemon.length}</li>\r\n        </Link> */}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","export default __webpack_public_path__ + \"static/media/example1.3effd21b.png\";","export default __webpack_public_path__ + \"static/media/example2.d4c02a28.png\";","export default __webpack_public_path__ + \"static/media/example3.8f582ab5.png\";","export default __webpack_public_path__ + \"static/media/example4.ff03b5e0.png\";","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport example1 from \"./../static/example1.png\";\r\nimport example2 from \"./../static/example2.png\";\r\nimport example3 from \"./../static/example3.png\";\r\nimport example4 from \"./../static/example4.png\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      <h1 className=\"headers\">About</h1>\r\n      <h4>\r\n        Design your dream get-well card or holiday card with Pokemon Card\r\n        Generator! Using photos fetched from Unsplash API and PokeAPI, you can\r\n        work in-browser to create your ideal card featuring your favorite\r\n        pokepal!\r\n      </h4>\r\n      <div className=\"images-collection\">\r\n        <img\r\n          src={example1}\r\n          alt=\"card example 1\"\r\n          className=\"image-size-smaller\"\r\n        />\r\n        <img\r\n          src={example2}\r\n          alt=\"card example 2\"\r\n          className=\"image-size-smaller\"\r\n        />\r\n        <img\r\n          src={example3}\r\n          alt=\"card example 3\"\r\n          className=\"image-size-smaller\"\r\n        />\r\n        <img\r\n          src={example4}\r\n          alt=\"card example 4\"\r\n          className=\"image-size-smaller\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Shop() {\r\n  useEffect(() => {\r\n    fetchItems();\r\n    // console.log(abilities);\r\n  }, []);\r\n\r\n  const [abilities, setAbilities] = useState([]);\r\n\r\n  const fetchItems = async () => {\r\n    const data = await fetch(\"https://pokeapi.co/api/v2/pokemon/garchomp\");\r\n\r\n    const garchompData = await data.json();\r\n    setAbilities(garchompData.abilities);\r\n  };\r\n\r\n  console.log(abilities);\r\n  return (\r\n    <div>\r\n      <h1 className=\"headers\">Shop</h1>\r\n      <div>\r\n        <h2>Garchomp abilities</h2>\r\n        {abilities.map((ability) => (\r\n          <h3 key={ability.slot}>\r\n            <Link to={`/shop/${ability.slot}`}>\r\n              {ability.ability.name.replace(\"-\", \" \")}\r\n            </Link>\r\n          </h3>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// {items.map((item) => {\r\n//   item.abilities;\r\n// })}\r\n\r\nexport default Shop;\r\n","import React from \"react\";\r\n\r\nconst Pokemon = ({ name, type }) => {\r\n  return (\r\n    <div>\r\n      <h3>{name}</h3>\r\n      <p>{type}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pokemon;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { PokemonContext } from \"./PokemonContext\";\r\n\r\nconst AddPokemon = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [pokemon, setPokemon] = useContext(PokemonContext);\r\n\r\n  const updateName = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const updateType = (e) => {\r\n    setType(e.target.value);\r\n  };\r\n\r\n  const addPokemon = (e) => {\r\n    e.preventDefault();\r\n    setPokemon((prevPokemon) => [...prevPokemon, { name: name, type: type }]);\r\n  };\r\n  return (\r\n    <form onSubmit={addPokemon}>\r\n      <input type=\"text\" name=\"name\" value={name} onChange={updateName}></input>\r\n      <input type=\"text\" name=\"type\" value={type} onChange={updateType}></input>\r\n      <button>Submit idea</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddPokemon;\r\n","import React, { useState, useContext } from \"react\";\r\nimport Pokemon from \"./Pokemon\";\r\nimport AddPokemon from \"./AddPokemon\";\r\nimport { PokemonContext } from \"./PokemonContext\";\r\n\r\nconst PokemonList = () => {\r\n  const [pokemon, setPokemon] = useContext(PokemonContext);\r\n  return (\r\n    <div>\r\n      <h1 className=\"headers\">Pokemon List</h1>\r\n      <AddPokemon />\r\n      {pokemon.map((pokemon) => (\r\n        <Pokemon name={pokemon.name} type={pokemon.type} key={pokemon.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Item({ match }) {\r\n  useEffect(() => {\r\n    fetchItem();\r\n    console.log(match.params.id);\r\n  }, []);\r\n\r\n  const [ability, setAbility] = useState([]);\r\n  const [image, setImage] = useState(\"\");\r\n\r\n  const fetchItem = async () => {\r\n    const fetchItem = await fetch(\r\n      `https://pokeapi.co/api/v2/ability/${match.params.id}`\r\n    );\r\n    const item = await fetchItem.json();\r\n    setAbility(item.pokemon);\r\n  };\r\n\r\n  const fetchImg = async (url) => {\r\n    const fetchImg = await fetch(`${url}`);\r\n    const img = await fetchImg.json();\r\n\r\n    setImage(img.sprites.front_default);\r\n  };\r\n  console.log(ability);\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Other pokemon with this ability\r\n        {ability.map((pokemon) => (\r\n          <h2>{pokemon.pokemon.name}</h2>\r\n          //   <img src={pokemon.pokemon.sprites.front_female} />\r\n        ))}\r\n        {/* {ability.map((pokemon) => (\r\n            fetchImg(pokemon.pokemon.url);\r\n           <img src={image}/> \r\n        ))} */}\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n// {items.map((item) => {\r\n//   item.abilities;\r\n// })}\r\n\r\nexport default Item;\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const CardGeneratorContext = createContext();\r\n\r\nexport const CardGeneratorProvider = (props) => {\r\n  const [backgroundPhotoURL, setBackgroundPhotoURL] = useState(\"forest\");\r\n  const [pokemonSelect, setPokemonSelect] = useState(\"bulbasaur\");\r\n  const [pokemonFetchStatus, setPokemonFetchStatus] = useState({});\r\n  const [backgroundPhotoFetchStatus, setBackgroundPhotoFetchStatus] = useState(\r\n    {}\r\n  );\r\n  return (\r\n    <CardGeneratorContext.Provider\r\n      value={[\r\n        backgroundPhotoURL,\r\n        setBackgroundPhotoURL,\r\n        pokemonSelect,\r\n        setPokemonSelect,\r\n        pokemonFetchStatus,\r\n        setPokemonFetchStatus,\r\n        backgroundPhotoFetchStatus,\r\n        setBackgroundPhotoFetchStatus,\r\n      ]}\r\n    >\r\n      {props.children}\r\n    </CardGeneratorContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { createApi, toJson } from \"unsplash-js\";\r\nimport { CardGeneratorContext } from \"./CardGeneratorContext\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default function SearchPhotos() {\r\n  const [query, setQuery] = useState(\"christmas tree\");\r\n  const [photoURL, setPhotoURL] = useState(\"\");\r\n  // Setting image search URL coming from CardGeneratorContext controlled by Context\r\n  const [\r\n    backgroundPhotoURL,\r\n    setBackgroundPhotoURL,\r\n    pokemonSelect,\r\n    setPokemonSelect,\r\n    pokemonFetchStatus,\r\n    setPokemonFetchStatus,\r\n    backgroundPhotoFetchStatus,\r\n    setBackgroundPhotoFetchStatus,\r\n  ] = useContext(CardGeneratorContext);\r\n\r\n  const unsplash = createApi({\r\n    accessKey: process.env.REACT_APP_API_KEY,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchBackgroundImage = async () => {\r\n      const background_image = await unsplash.search.getPhotos({\r\n        query: query,\r\n      });\r\n\r\n      (await background_image.response.results[0])\r\n        ? setBackgroundPhotoURL(\r\n            background_image.response.results[0].urls.regular\r\n          )\r\n        : setBackgroundPhotoFetchStatus({ state: false });\r\n    };\r\n    fetchBackgroundImage();\r\n  }, []);\r\n\r\n  const searchForPhotos = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Submitted\");\r\n\r\n    if (query.length === 0) return;\r\n\r\n    const background_image = await unsplash.search.getPhotos({\r\n      query: query,\r\n    });\r\n\r\n    background_image.response.results[0]\r\n      ? setBackgroundPhotoURL(background_image.response.results[0].urls.regular)\r\n      : setBackgroundPhotoFetchStatus({ state: false });\r\n\r\n    // const url = `https://api.unsplash.com/search/photos/?page=1&per_page=10&query=${query}`;\r\n\r\n    // const backgroundImageArray = axios.get(url).then((response) => {\r\n    //   console.log(response);\r\n    // });\r\n    // console.log(background_image);\r\n\r\n    // setPhotoURL(background_image.response.results[0].urls.small);\r\n\r\n    //   .then((result) => {\r\n    //     console.log(result.response.results[0].urls.regular);\r\n    //     setPhotoURL(result.response.results[0].urls.regular);\r\n    //   });\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-forms search-photo-form\">\r\n      <form onSubmit={searchForPhotos}>\r\n        <label>Image Search</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"query\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          placeholder={`Try 'Forest'`}\r\n        ></input>\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { CardGeneratorContext } from \"./CardGeneratorContext\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default function SearchPokemon() {\r\n  useEffect(() => {\r\n    const url = \"https://pokeapi.co/api/v2/pokemon/bulbasaur\";\r\n\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        setPokemonSelect(response.data.sprites.front_default);\r\n        setPokemonFetchStatus(response.status);\r\n      })\r\n      .catch(({ request }) => {\r\n        setPokemonFetchStatus(request.status);\r\n      });\r\n  }, []);\r\n  const [query, setQuery] = useState(\"bulbasaur\");\r\n  // Setting image search URL coming from CardGeneratorContext controlled by Context\r\n  const [\r\n    backgroundPhotoURL,\r\n    setBackgroundPhotoURL,\r\n    pokemonSelect,\r\n    setPokemonSelect,\r\n    pokemonFetchStatus,\r\n    setPokemonFetchStatus,\r\n  ] = useContext(CardGeneratorContext);\r\n\r\n  const searchForPokemon = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (query.length === 0) return;\r\n    const url = `https://pokeapi.co/api/v2/pokemon/${query}`;\r\n\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        console.log(response);\r\n        setPokemonSelect(response.data.sprites.front_default);\r\n        setPokemonFetchStatus(response.status);\r\n      })\r\n      .catch(({ request }) => {\r\n        console.log(request);\r\n        setPokemonFetchStatus(request.status);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-forms search-pokemon-form\">\r\n      <form onSubmit={searchForPokemon}>\r\n        <label>Pokemon Search</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"query\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          placeholder={`Search for Pokemon`}\r\n        ></input>\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Stage, Layer, Image, Text, Transformer } from \"react-konva\";\r\nimport useImage from \"use-image\";\r\n\r\nimport { CardGeneratorContext } from \"./CardGeneratorContext\";\r\n\r\n// import ExportHandler from \"./ExportHandler\";\r\n\r\nconst CardCanvas = ({ cardText, textColor }) => {\r\n  const [\r\n    backgroundPhotoURL,\r\n    setBackgroundPhotoURL,\r\n    pokemonSelect,\r\n    setPokemonSelect,\r\n    pokemonFetchError,\r\n    setPokemonFetchError,\r\n  ] = useContext(CardGeneratorContext);\r\n\r\n  const [pokemonArray, setPokemonArray] = useState([pokemonSelect]);\r\n\r\n  const [pokemon] = useImage(pokemonSelect);\r\n\r\n  const [backgroundImage] = useImage(backgroundPhotoURL);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [isPokemonDragging, setIsPokemonDragging] = useState(false);\r\n  const [pokemonWidth, setPokemonWidth] = useState(250);\r\n  const [pokemonHeight, setPokemonHeight] = useState(250);\r\n  const [imageX, setImageX] = useState(0);\r\n  const [imageY, setImageY] = useState(0);\r\n  const [pokemonX, setPokemonX] = useState(130);\r\n  const [pokemonY, setPokemonY] = useState(325);\r\n  const [textX, setTextX] = useState(60);\r\n  const [textY, setTextY] = useState(100);\r\n\r\n  const handleDragStart = (e) => {\r\n    e.target.setAttrs({\r\n      shadowOffset: {\r\n        x: 5,\r\n        y: 5,\r\n      },\r\n      shadowBlur: 10,\r\n      scaleX: 1.1,\r\n      scaleY: 1.1,\r\n    });\r\n  };\r\n\r\n  const PokemonPicture = ({ shapeProps, isSelected, onSelect, onChange }) => {\r\n    const shapeRef = React.useRef();\r\n    const transformerRef = React.useRef();\r\n\r\n    React.useEffect(() => {\r\n      if (isSelected) {\r\n        transformerRef.current.nodes([shapeRef.current]);\r\n        transformerRef.current.getLayer().batchDraw();\r\n      }\r\n    }, [isSelected]);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Image\r\n          image={pokemon}\r\n          width={pokemonWidth}\r\n          height={pokemonHeight}\r\n          onClick={onSelect}\r\n          onTap={onSelect}\r\n          ref={shapeRef}\r\n          {...shapeProps}\r\n          draggable\r\n          x={pokemonX}\r\n          y={pokemonY}\r\n          onDragEnd={(e) => {\r\n            onChange({\r\n              ...shapeProps,\r\n              x: e.target.x(),\r\n              y: e.target.y(),\r\n              width: pokemonWidth,\r\n              height: pokemonHeight,\r\n            });\r\n          }}\r\n          onTransformEnd={(e) => {\r\n            const node = shapeRef.current;\r\n            const scaleX = node.scaleX();\r\n            const scaleY = node.scaleY();\r\n\r\n            node.scaleX(1);\r\n            node.scaleY(1);\r\n\r\n            onChange({\r\n              ...shapeProps,\r\n              x: node.x(),\r\n              y: node.y(),\r\n              width: Math.max(5, node.width() * scaleX) || 1,\r\n              height: Math.max(node.height() * scaleY) || 1,\r\n            });\r\n          }}\r\n        />\r\n        {isSelected && (\r\n          <Transformer\r\n            ref={transformerRef}\r\n            boundBoxFunc={(oldBox, newBox) => {\r\n              if (newBox.width < 5 || newBox.height < 5) {\r\n                return oldBox;\r\n              }\r\n              return newBox;\r\n            }}\r\n          />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n  const [rectangles, setRectangles] = React.useState(pokemonArray);\r\n  const [selectedId, selectShape] = React.useState(null);\r\n\r\n  const checkDeselect = (e) => {\r\n    // deselect when clicked on empty area\r\n    // change something here so that when you click on NOT this layer it deselects\r\n    const clickedOnEmpty = e.target === e.target.getStage();\r\n    // console.log(backgroundImage.src);\r\n    const clickedOnBackground =\r\n      e.target.attrs.image?.src === backgroundImage?.src;\r\n    // console.log(clickedOnBackground);\r\n    if (clickedOnEmpty || clickedOnBackground) {\r\n      selectShape(null);\r\n    }\r\n  };\r\n\r\n  // const handleExport = (stageRef) => {\r\n  //   if (!stageRef.current) return;\r\n  //   console.log(stageRef.current);\r\n  //   const uri = stageRef.current.toDataURL();\r\n  //   window.open(uri);\r\n\r\n  //   downloadURI(uri, \"stage.png\");\r\n  // };\r\n\r\n  // function downloadURI(uri, name) {\r\n  //   var link = document.createElement(\"a\");\r\n  //   link.download = name;\r\n  //   link.href = uri;\r\n  //   document.body.appendChild(link);\r\n  //   link.click();\r\n  //   document.body.removeChild(link);\r\n  //   console.log(link);\r\n  // }\r\n\r\n  // const ExportHandler = ({ stageRef }) => {\r\n  //   return (\r\n  //     <div>\r\n  //       <h3>Export Handler</h3>\r\n\r\n  //     </div>\r\n  //   );\r\n  // };\r\n\r\n  const stageRef = useRef(null);\r\n\r\n  console.log(textColor);\r\n\r\n  return (\r\n    <div className=\"column-third card-canvas\">\r\n      <div className=\"card-generator-border\">\r\n        <Stage\r\n          // width={window.innerWidth}\r\n          width={500}\r\n          height={600}\r\n          ref={stageRef}\r\n          // height={window.innerHeight}\r\n          onMouseDown={checkDeselect}\r\n          onTouchStart={checkDeselect}\r\n        >\r\n          {/* The background image from Unsplash */}\r\n          <Layer id={\"bg-image\"}>\r\n            <Image\r\n              image={backgroundImage}\r\n              x={imageX}\r\n              y={imageY}\r\n              draggable\r\n              onDragStart={() => {\r\n                setIsDragging(true);\r\n              }}\r\n              onDragEnd={(e) => {\r\n                setIsDragging(false);\r\n                setImageX(e.target.x());\r\n                setImageY(e.target.y());\r\n              }}\r\n            ></Image>\r\n          </Layer>\r\n\r\n          {/* Test: Pokemon layer with transformations */}\r\n          <Layer>\r\n            {/*\r\n            {pokemonArray.map((poke, i) => {\r\n              console.log(shapeProps);\r\n              return (\r\n                <PokemonPicture\r\n                  key={i}\r\n                  shapeProps={poke}\r\n                  isSelected={1 === selectedId}\r\n                  onSelect={() => {\r\n                    selectShape(1);\r\n                    console.log(\"when clicking on object: \", selectedId);\r\n                    console.log(pokemonHeight);\r\n                  }}\r\n                  onChange={(newAttrs) => {\r\n                    const pokes = pokemonArray.slice();\r\n                    pokes[i] = newAttrs;\r\n                    setRectangles(pokes);\r\n                    // console.log(newAttrs);\r\n                  }}\r\n                ></PokemonPicture>\r\n              );\r\n            })} */}\r\n            <PokemonPicture\r\n              key={1}\r\n              shapeProps={pokemon}\r\n              isSelected={1 === selectedId}\r\n              onSelect={() => {\r\n                selectShape(1);\r\n              }}\r\n              onChange={(newAttrs) => {\r\n                setPokemonWidth(newAttrs.width);\r\n                setPokemonHeight(newAttrs.height);\r\n                console.log(newAttrs.width, newAttrs.height);\r\n                setPokemonX(newAttrs.x);\r\n                setPokemonY(newAttrs.y);\r\n              }}\r\n            ></PokemonPicture>\r\n          </Layer>\r\n          {/* The text */}\r\n          <Layer>\r\n            <Text\r\n              draggable\r\n              x={textX}\r\n              y={textY}\r\n              fontSize={50}\r\n              fontFamily={\"Sofia Pro\"}\r\n              text={cardText}\r\n              fill={textColor}\r\n            ></Text>\r\n          </Layer>\r\n\r\n          {/* The Pokemon Image */}\r\n          {/* <Layer>\r\n          <Image\r\n            image={pokemon}\r\n            scaleX={isPokemonDragging ? 1.1 : 1}\r\n            scaleY={isPokemonDragging ? 1.1 : 1}\r\n            x={pokemonX}\r\n            y={pokemonY}\r\n            draggable\r\n            onDragStart={(e) => {\r\n              setIsPokemonDragging(true);\r\n\r\n              handleDragStart(e);\r\n            }}\r\n            onDragEnd={(e) => {\r\n              setIsPokemonDragging(false);\r\n              setPokemonX(e.target.x());\r\n              setPokemonY(e.target.y());\r\n            }}\r\n          ></Image>\r\n        </Layer> */}\r\n        </Stage>\r\n      </div>\r\n      {/* <button onClick={() => handleExport(stageRef)}>Export</button> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardCanvas;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst TextInputForCanvas = ({ cardText, setCardText }) => {\r\n  useEffect(() => {\r\n    setText(cardText);\r\n  }, []);\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const updateText = (e) => {\r\n    setText(e.target.value);\r\n    setCardText(e.target.value);\r\n  };\r\n\r\n  const setCanvasText = (e) => {\r\n    e.preventDefault();\r\n    setCardText(text);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={setCanvasText}>\r\n        <label>Text Input</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"cardtext\"\r\n          value={text}\r\n          onChange={(e) => {\r\n            updateText(e);\r\n            // setCardText(e);\r\n          }}\r\n        ></input>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInputForCanvas;\r\n","import React, { useState } from \"react\";\r\n\r\nconst ColorInputForCanvas = ({ textColor, setTextColor }) => {\r\n  const [color, setColor] = useState(\"\");\r\n\r\n  const updateColor = (e) => {\r\n    setColor(e.target.value);\r\n    setTextColor(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"color-input\">\r\n      <label for=\"colorselect\">Select text color: </label>\r\n      <input\r\n        type=\"color\"\r\n        id=\"colorselect\"\r\n        name=\"colorselect\"\r\n        value={textColor}\r\n        onChange={(e) => {\r\n          updateColor(e);\r\n          console.log(e);\r\n        }}\r\n      ></input>\r\n      {/* <div>{textColor}</div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorInputForCanvas;\r\n","import React from \"react\";\r\n\r\nconst CanvasHowToUse = () => {\r\n  return (\r\n    <div className=\"column-third last-third\">\r\n      <h3>How to Use</h3>\r\n      <p>1. Search for background image and Pokemon image.</p>\r\n      <p>2. Drag and drop the text to desired location.</p>\r\n      <p>3. Change text color to match background.</p>\r\n      <p>4. Export functionality COMING SOON!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasHowToUse;\r\n","import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Stage, Layer, Image, Text, Transformer } from \"react-konva\";\r\n\r\n// function downloadURI(uri, name) {\r\n//   var link = document.createElement(\"a\");\r\n//   link.download = name;\r\n//   link.href = uri;\r\n//   document.body.appendChild(link);\r\n//   link.click();\r\n//   document.body.removeChild(link);\r\n//   console.log(link);\r\n// }\r\n\r\n// function handleExport(stageRef) {\r\n//   const uri = stageRef.current.toDataURL();\r\n//   window.open(uri);\r\n\r\n//   downloadURI(uri, \"stage.png\");\r\n// }\r\n\r\nconst ExportHandler = ({ stageRef }) => {\r\n  return (\r\n    <div>\r\n      {/* <h3>Export Handler</h3> */}\r\n      {/* <button onClick={handleExport(stageRef)}>Export</button> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportHandler;\r\n","import React, { useState, useContext, useRef } from \"react\";\r\nimport SearchPhotos from \"./SearchPhotos\";\r\nimport SearchPokemon from \"./SearchPokemon\";\r\nimport CardCanvas from \"./CardCanvas\";\r\nimport { CardGeneratorContext } from \"./CardGeneratorContext\";\r\nimport TextInputForCanvas from \"./TextInputForCanvas\";\r\nimport ColorInputForCanvas from \"./ColorInputForCanvas\";\r\nimport CanvasHowToUse from \"./CanvasHowToUse\";\r\nimport ExportHandler from \"./ExportHandler\";\r\n\r\nconst CardGenerator = () => {\r\n  const [\r\n    backgroundPhotoURL,\r\n    setBackgroundPhotoURL,\r\n    pokemonSelect,\r\n    setPokemonSelect,\r\n    pokemonFetchError,\r\n    setPokemonFetchError,\r\n    backgroundPhotoFetchStatus,\r\n  ] = useContext(CardGeneratorContext);\r\n\r\n  // Canvas modifiers section states\r\n  const [cardText, setCardText] = useState(\"Happy holidays!\");\r\n  const [textColor, setTextColor] = useState(\"#ffaa00\");\r\n\r\n  // Set stage ref for export\r\n  const stageRef = useRef(null);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"headers\">Card Generator</h1>\r\n      <h4>\r\n        Generate a get-well card or a card for the holidays with the Pokemon\r\n        Database and a photo from Unsplash!\r\n      </h4>\r\n      <SearchPhotos />\r\n      {backgroundPhotoFetchStatus.state === false ? (\r\n        <div className=\"pokemon-fetch-error\">\r\n          No photos were found with this query.\r\n        </div>\r\n      ) : null}\r\n      <SearchPokemon />\r\n      {pokemonFetchError === 404 ? (\r\n        <div className=\"pokemon-fetch-error\">\r\n          Please enter valid Pokemon name.\r\n        </div>\r\n      ) : null}\r\n      <div className=\"segmented-third\">\r\n        <div className=\"column-third canvas-modifier\">\r\n          <h3>Modify the Canvas</h3>\r\n          <TextInputForCanvas cardText={cardText} setCardText={setCardText} />\r\n          <ColorInputForCanvas\r\n            textColor={textColor}\r\n            setTextColor={setTextColor}\r\n          />\r\n          <ExportHandler stageRef={stageRef} />\r\n        </div>\r\n        <CardCanvas\r\n          cardText={cardText}\r\n          textColor={textColor}\r\n          stageRef={stageRef}\r\n        />\r\n        <CanvasHowToUse />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardGenerator;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst SearchBar = ({ searchQuery, setSearchQuery }) => {\r\n  const history = useHistory();\r\n  const onSubmit = (e) => {\r\n    history.push(`?s=${searchQuery}`);\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-bar\">\r\n      <form\r\n        className=\"search-bar-stack\"\r\n        action=\"/\"\r\n        method=\"get\"\r\n        autoComplete=\"off\"\r\n        onSubmit={onSubmit}\r\n      >\r\n        <label htmlFor=\"header-search\">\r\n          <span className=\"visually-hidden search-label\">Search Pokemon: </span>\r\n        </label>\r\n        <input\r\n          value={searchQuery}\r\n          onInput={setSearchQuery}\r\n          type=\"text\"\r\n          id=\"header-search\"\r\n          placeholder=\"Search\"\r\n          name=\"s\"\r\n          className=\"search-input\"\r\n          style={{ fontFamily: \"'Sophia Pro', sans-serif\" }}\r\n        ></input>\r\n        <button className=\"search-button\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./PokemonCard.css\";\r\n\r\nconst PokemonCard = ({ pokemon }) => {\r\n  const types = pokemon.types.reduce((acc, type, i) => {\r\n    return acc + type.type.name + (i === 1 ? \"\" : \" -\");\r\n  }, \"\");\r\n\r\n  return (\r\n    <div className=\"pokemon-card\">\r\n      <h1 className=\"pokemon-card-title\">\r\n        {pokemon.entry_number}. {pokemon.name.toUpperCase()}\r\n      </h1>\r\n      <div className=\"pokemon-card-picture-border\">\r\n        <div className={`pokemon-card-picture ${types} `}>\r\n          <div className=\"pokemon-card-picture-background\">\r\n            <img src={pokemon.sprites.front_default}></img>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* {console.log(pokemon)} */}\r\n      <div className=\"pokemon-card-types\">\r\n        <div className={`pokemon-card-types-one ${pokemon.types[0].type.name}`}>\r\n          {pokemon.types[0].type.name}\r\n        </div>\r\n        {pokemon?.types[1]?.type?.name && (\r\n          <div\r\n            className={`pokemon-card-types-two ${pokemon?.types[1]?.type?.name}`}\r\n          >\r\n            {pokemon?.types[1]?.type?.name}\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        {pokemon.moves.map((move, i) => {\r\n          if (i < 3) {\r\n            return (\r\n              <p>\r\n                {i + 1}. {move.move.name.replace(\"-\", \" \")}\r\n              </p>\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonCard;\r\n","import React from \"react\";\r\nimport \"./Announcer.css\";\r\n\r\nconst Announcer = ({ message }) => {\r\n  return (\r\n    <div className=\"announcer\" role=\"region\" aria-live=\"polite\">\r\n      {message}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Announcer;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction Pagination({\r\n  currentPage,\r\n  setCurrentPage,\r\n  searchQuery,\r\n  setSearchQuery,\r\n  data,\r\n  RenderComponent,\r\n  title,\r\n  pageLimit,\r\n  dataLimit,\r\n  loading,\r\n  setLoading,\r\n}) {\r\n  const history = useHistory();\r\n  const [pages] = useState(Math.ceil(data.length / dataLimit));\r\n\r\n  function goToNextPage() {\r\n    setCurrentPage((page) => page + 1);\r\n  }\r\n\r\n  function goToPreviousPage() {\r\n    setCurrentPage((page) => page - 1);\r\n  }\r\n\r\n  function changePage(event) {\r\n    const pageNumber = Number(event.target.textContent);\r\n    setCurrentPage(pageNumber);\r\n  }\r\n\r\n  const getPaginatedData = () => {\r\n    const startIndex = currentPage * dataLimit - dataLimit;\r\n    const endIndex = startIndex + dataLimit;\r\n    return data.slice(startIndex, endIndex);\r\n  };\r\n\r\n  const getPaginationGroup = () => {\r\n    let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\r\n    return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\r\n  };\r\n\r\n  const incrementPageBy = (pageIncrement) => {\r\n    const currentPage = parseInt(history.location.pathname.split(\"/\").pop());\r\n    const futurePage = currentPage + pageIncrement;\r\n    if (futurePage < 1) return currentPage;\r\n    return futurePage;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"database-container\">\r\n        {getPaginatedData().map((data, index) => (\r\n          <RenderComponent key={index} pokeIndex={index} pokemon={data} />\r\n        ))}\r\n      </div>\r\n\r\n      {/* show pagination */}\r\n      <div className=\"pagination\">\r\n        {/* Previous button */}\r\n        {/* <Link to={`/database/${incrementPageBy(1)}`}>\r\n          <button className=\"pagination-detail\" onClick={goToPreviousPage}>\r\n            Prev\r\n          </button>\r\n        </Link> */}\r\n        <Link to={`/${incrementPageBy(1)}`}>\r\n          <button className=\"pagination-detail\" onClick={goToPreviousPage}>\r\n            Prev\r\n          </button>\r\n        </Link>\r\n\r\n        {/* page numbers */}\r\n        {getPaginationGroup().map((item, index) => (\r\n          // <Link to={`/database/${index + 1}`}>\r\n          //   <button\r\n          //     key={index}\r\n          //     onClick={changePage}\r\n          //     className={`pagination-detail pagination-number  paginationItem ${\r\n          //       currentPage === item ? \"active\" : null\r\n          //     }`}\r\n          //   >\r\n          //     <span>{item}</span>\r\n          //   </button>\r\n          // </Link>\r\n          <Link to={`/${index + 1}`}>\r\n            <button\r\n              key={index}\r\n              onClick={changePage}\r\n              className={`pagination-detail pagination-number  paginationItem ${\r\n                currentPage === item ? \"active\" : null\r\n              }`}\r\n            >\r\n              <span>{item}</span>\r\n            </button>\r\n          </Link>\r\n        ))}\r\n        {/* Next button */}\r\n        {/* <Link to={`/database/${incrementPageBy(-1)}`}>\r\n          <button className=\"pagination-detail\" onClick={goToNextPage}>\r\n            Next\r\n          </button>\r\n        </Link> */}\r\n        <Link to={`/${incrementPageBy(-1)}`}>\r\n          <button className=\"pagination-detail\" onClick={goToNextPage}>\r\n            Next\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const RegionSelectorContext = createContext();\r\n\r\nexport const RegionSelectorProvider = (props) => {\r\n  const [region, setRegion] = useState(\"2\");\r\n  return (\r\n    <RegionSelectorContext.Provider value={[region, setRegion]}>\r\n      {props.children}\r\n    </RegionSelectorContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { RegionSelectorContext } from \"./RegionSelectorContext\";\r\n\r\nconst RegionSelector = () => {\r\n  const [region, setRegion] = useContext(RegionSelectorContext);\r\n  const changeRegion = (e) => {\r\n    setRegion(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Region Selector</h2>\r\n      <label for=\"region-select\">Choose a region: </label>\r\n      <div className=\"select\">\r\n        <select onChange={changeRegion} name=\"region\" id=\"region-select\">\r\n          <option value=\"none\" selected disabled hidden>\r\n            Select Region\r\n          </option>\r\n          <option value=\"2\">Kanto</option>\r\n          <option value=\"3\">Johto</option>\r\n          <option value=\"4\">Hoenn</option>\r\n          <option value=\"5\">Sinnoh</option>\r\n          <option value=\"8\">Unova</option>\r\n          <option value=\"12\">Kalos</option>\r\n          <option value=\"16\">Alola</option>\r\n          <option value=\"20\">Galar</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegionSelector;\r\n","import React from \"react\";\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst LoaderGUI = () => {\r\n  // const { promiseInProgress } = usePromiseTracker();\r\n  // return promiseInProgress && <h2>I'm loading!</h2>;\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Loader type=\"Grid\" color=\"lightcoral\" height=\"100\" width=\"100\"></Loader>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoaderGUI;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Bluebird from \"bluebird\";\r\n\r\nimport { trackPromise } from \"react-promise-tracker\";\r\n\r\nexport const FetchPokemonList = async ({\r\n  pokemon,\r\n  setPokemon,\r\n  region,\r\n  loading,\r\n  setLoading,\r\n}) => {\r\n  try {\r\n    const { data: dataN } =\r\n      await axios.get(`https://pokeapi.co/api/v2/pokedex/${region}/\r\n\r\n  `);\r\n\r\n    // const pokemonEntryNumberArray = await Bluebird.map(dataN.pokemon_entries)\r\n\r\n    const detailedPokeArr = await Bluebird.map(\r\n      dataN.pokemon_entries,\r\n      async (poke, i) => {\r\n        // if (i % 2 === 0) return;\r\n        const { data } = await axios.get(poke.pokemon_species.url);\r\n\r\n        const { data: finalData } = await axios.get(\r\n          data.varieties[0].pokemon.url\r\n        );\r\n\r\n        finalData[\"entry_number\"] = poke.entry_number;\r\n\r\n        return finalData;\r\n      }\r\n    );\r\n\r\n    // Old method - using limit\r\n    //     const data = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=75\r\n    // `);\r\n\r\n    //     const pokemonData = await data.json();\r\n\r\n    //     const enhancedPokeData = await Promise.all(\r\n    //       pokemonData.results.map(async (poke) => {\r\n    //         let extraData = await fetch(poke.url);\r\n    //         extraData = await extraData.json();\r\n    //         poke.details = extraData;\r\n    //         return poke;\r\n    //       })\r\n    //     );\r\n\r\n    setPokemon(detailedPokeArr);\r\n    setLoading(false);\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n  }\r\n};\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport PokemonCard from \"./PokemonCard\";\r\nimport Announcer from \"./Announcer\";\r\nimport Pagination from \"./Pagination\";\r\nimport RegionSelector from \"./RegionSelector\";\r\nimport \"./Database.css\";\r\n\r\nimport LoaderGUI from \"./LoaderGUI\";\r\n\r\nimport { FetchPokemonList } from \"./FetchPokemonList\";\r\n\r\nimport \"./Paginator.css\";\r\nimport {\r\n  RegionSelectorContext,\r\n  RegionSelectorProvider,\r\n} from \"./RegionSelectorContext\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Database() {\r\n  // Regions coming from RegionSelector controlled by Context\r\n  const [region, setRegion] = useContext(RegionSelectorContext);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    FetchPokemonList({\r\n      pokemon: pokemon,\r\n      setPokemon: setPokemon,\r\n      region: region,\r\n      loading: loading,\r\n      setLoading: setLoading,\r\n    });\r\n  }, [region]);\r\n\r\n  // Search bar functionality\r\n  const { search } = window.location;\r\n  const query = new URLSearchParams(search).get(\"s\");\r\n\r\n  const filterPokemon = (mons, query) => {\r\n    if (!query) {\r\n      return mons;\r\n    }\r\n\r\n    return mons.filter((mon) => {\r\n      return mon.name.includes(query);\r\n    });\r\n  };\r\n\r\n  const [pokemon, setPokemon] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(query || \"\");\r\n  const filteredMons = filterPokemon(pokemon, searchQuery);\r\n  // Search bar functionality\r\n\r\n  // Pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  // Pagination\r\n\r\n  // const fetchPokemon = async (pokemon, setPokemon) => {\r\n  //   const data = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=75\r\n  //   `);\r\n\r\n  //   const pokemonData = await data.json();\r\n\r\n  //   const enhancedPokeData = await Promise.all(\r\n  //     pokemonData.results.map(async (poke) => {\r\n  //       let extraData = await fetch(poke.url);\r\n  //       extraData = await extraData.json();\r\n  //       poke.details = extraData;\r\n  //       return poke;\r\n  //     })\r\n  //   );\r\n\r\n  //   setPokemon(enhancedPokeData);\r\n  // };\r\n\r\n  const handleSearchQuery = (e) => {\r\n    if (currentPage !== 1) setCurrentPage(1);\r\n    setSearchQuery(e.target.value);\r\n  };\r\n\r\n  const regionsList = {\r\n    2: \"Kanto\",\r\n    3: \"Johto\",\r\n    4: \"Hoenn\",\r\n    5: \"Sinnoh\",\r\n    8: \"Unova\",\r\n    12: \"Kalos\",\r\n    16: \"Alola\",\r\n    20: \"Galar\",\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <RegionSelectorProvider> */}\r\n      <h1 className=\"headers\">{regionsList[region]} Pokemon Database</h1>\r\n      <div className=\"categories-bar-REMOVE\">\r\n        <RegionSelector />\r\n        <SearchBar\r\n          searchQuery={searchQuery}\r\n          setSearchQuery={handleSearchQuery}\r\n        />\r\n        {loading ? (\r\n          <LoaderGUI />\r\n        ) : (\r\n          <div className=\"database-container\">\r\n            {filteredMons.map((mon) => (\r\n              <PokemonCard pokemon={mon} />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* {loading ? (\r\n        <LoaderGUI />\r\n      ) : (\r\n        <Pagination\r\n          searchQuery={searchQuery}\r\n          setSearchQuery={setSearchQuery}\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n          data={filteredMons}\r\n          RenderComponent={PokemonCard}\r\n          title=\"Pokemon Title\"\r\n          pageLimit={6}\r\n          dataLimit={20}\r\n          loading={loading}\r\n          setLoading={setLoading}\r\n        />\r\n      )} */}\r\n      <Announcer message={`Found ${filteredMons.length} pokemon`} />\r\n      {/* </RegionSelectorProvider> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Database;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Nav from \"./Nav\";\r\nimport About from \"./About\";\r\nimport Shop from \"./Shop\";\r\nimport PokemonList from \"./PokemonList\";\r\nimport ItemDetail from \"./ItemDetail\";\r\nimport AddPokemon from \"./AddPokemon\";\r\nimport CardGenerator from \"./CardGenerator\";\r\nimport Database from \"./Database\";\r\nimport { PokemonProvider } from \"./PokemonContext\";\r\nimport { RegionSelectorProvider } from \"./RegionSelectorContext\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { CardGeneratorProvider } from \"./CardGeneratorContext\";\r\n\r\nimport BackgroundImage from \"./BackgroundImage\";\r\nimport SearchPhotos from \"./SearchPhotos\";\r\n\r\nimport \"../styles/main.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <PokemonProvider>\r\n        <div className=\"app\">\r\n          <Nav />\r\n\r\n          <Switch>\r\n            {/* <Route path=\"/:pageNumber\" component={Database} /> */}\r\n\r\n            <Route path=\"/about\" component={About} />\r\n            {/* <RegionSelectorProvider>\r\n              <Route path=\"/database\" component={Database} />\r\n            </RegionSelectorProvider>\r\n            <Route path=\"/database/:pageNumber\" component={Database} /> */}\r\n            <Route path=\"/shop\" exact component={Shop} />\r\n            <Route path=\"/shop/:id\" component={ItemDetail} />\r\n            <Route path=\"/pokemonlist\" component={PokemonList} />\r\n            <CardGeneratorProvider>\r\n              <RegionSelectorProvider>\r\n                <Route path=\"/cardgenerator\" component={CardGenerator} />\r\n\r\n                <Route path=\"/\" exact component={Database} />\r\n              </RegionSelectorProvider>\r\n            </CardGeneratorProvider>\r\n          </Switch>\r\n        </div>\r\n      </PokemonProvider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Home Page</h1>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./components/App.css\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}